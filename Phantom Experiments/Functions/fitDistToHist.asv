function [coeffs, resnorm] = fitDistToHist(counts, bincenters, params, opts)

arguments

    counts % Array of counts
    bincenters % Array of bin centers

    % Distribution parameters 
    params.sigma0 = NaN
    params.fd = NaN
    params.T2 
    params.TE = 50 % Specify at [TE1, TE2] for DTIRatio
    params.N0 = 1
    params.Nb = 1

    opts.disttype 
    opts.beta0guess 

    opts.lb 
    opts.ub 

end


%% Normalise histogram counts

counts = counts/sum(counts);


%% Fit

% Assign variable to base (for access in functions)
assignin('base', 'current_params', params)

options = optimoptions('lsqcurvefit');


switch opts.disttype

    case 'Ratio'
        [coeffs, resnorm] = lsqcurvefit(@RatioDist, opts.beta0guess, bincenters, counts, opts.lb, opts.ub, options);

    case 'Rice'
        [coeffs, resnorm] = lsqcurvefit(@RiceDist, opts.beta0guess, bincenters, counts, opts.lb, opts.ub , options);  

    case 'DTIRatio'
        [coeffs, resnorm] = lsqcurvefit(@DTIRatioDist, opts.beta0guess, bincenters, counts, opts.lb(1:2), opts.ub(1:2) , options); 
end

% if Nparam == 1
%     coeffs = [coeffs, params.T2, params.fd];
% elseif Nparam == 2
%     coeffs = [coeffs, params.fd];
% elseif Nparam == 3
%     coeffs = [coeffs];
% end


end


% Function to fit Ratio distribution

% function binfreqs = RatioDist1(b, x)
% 
% % Generate ratio distribution given x
% % Outputs bin frequencies at bin centers predicted
% % for ratio distribution with sigma0
% 
% arguments
%     b % sigma0 value
%     x % bin centers
% end
% 
% % Get parameters
% params = evalin('base', 'current_params');
% T2 = params.T2;
% TE = params.TE;
% fd = params.fd;
% N0 = params.N0;
% Nb = params.Nb;
% sigma0 = b;
% 
% % b0 signal
% b0signal = exp(-TE/T2);
% 
% % b signal
% bsignal = fd*b0signal;
% 
% % Bin spacings
% binmin = min(x);
% binmax = max(x);
% binspacing = x(2)-x(1);
% 
% 
% % Generate pdf over bin centers
% pdfvals = RatioDistRician( ...
%     b0signal, ...
%     bsignal, ...
%     sigma0, ...
%     N0=N0, ...
%     Nb=Nb, ...
%     zmin = binmin, ...
%     zmax = binmax, ...
%     dz = binspacing,...
%     ymin = binmin,...
%     ymax = binmax,...
%     dy = binspacing);
% 
% % Evaluate bin frequencies
% binfreqs = pdfvals*binspacing;
% 
% binfreqs = reshape(binfreqs, size(x));
% 
% end
% 
% function binfreqs = RatioDist2(b, x)

% Generate ratio distribution given x
% Outputs bin frequencies at bin centers predicted
% for ratio distribution with sigma0

% arguments
%     b % [sigma0, T2] value
%     x % bin centers
% end
% 
% % Get parameters
% params = evalin('base', 'current_params');
% TE = params.TE;
% fd = params.fd;
% N0 = params.N0;
% Nb = params.Nb;
% sigma0 = b(1);
% T2 = b(2);
% 
% % b0 signal
% b0signal = exp(-TE/T2);
% 
% % b signal
% bsignal = fd*b0signal;
% 
% % Bin spacings
% binmin = min(x);
% binmax = max(x);
% binspacing = x(2)-x(1);
% 
% % Generate pdf over bin centers
% pdfvals = RatioDistRician( ...
%     b0signal, ...
%     bsignal, ...
%     sigma0, ...
%     N0=N0, ...
%     Nb=Nb, ...
%     zmin = binmin, ...
%     zmax = binmax, ...
%     dz = binspacing,...
%     ymin = binmin,...
%     ymax = binmax,...
%     dy = binspacing);
% 
% % Evaluate bin frequencies
% binfreqs = pdfvals*binspacing;
% 
% binfreqs = reshape(binfreqs, size(x));
% 
% 
% end

function binfreqs = RatioDist3(b, x)

% Generate ratio distribution given x
% Outputs bin frequencies at bin centers predicted
% for ratio distribution with sigma0

arguments
    b % [sigma0, T2, fd] value
    x % bin centers
end

% Get parameters
params = evalin('base', 'current_params');
TE = params.TE;
N0 = params.N0;
Nb = params.Nb;
sigma0 = b(1);
T2 = b(2);
fd = b(3);

% b0 signal
b0signal = exp(-TE/T2);

% b signal
bsignal = fd*b0signal;

% Bin center
bincentres = x;

% Bin spacings
binmin = min(x);
binmax = max(x);
binspacing = x(2)-x(1);

% Generate pdf over bin centers
pdfvals = RatioDistRician( ...
    b0signal, ...
    bsignal, ...
    sigma0, ...
    N0=N0, ...
    Nb=Nb, ...
    zs = bincentres,...
    ys = bincentres,...
    ymin = binmin,...
    ymax = binmax,...
    dy = binspacing);

% Evaluate bin frequencies
binfreqs = pdfvals*binspacing;

binfreqs = reshape(binfreqs, size(x));


end


% % Function to fit Rice distribution
% 
% function binfreqs = RiceDist1(b, x)
% 
% % Generate Rice distribution given x
% % Outputs bin frequencies at bin centers predicted
% % for ratio distribution with sigma0
% 
% arguments
%     b % sigma0 value
%     x % bin centers
% end
% 
% % Get parameters
% params = evalin('base', 'current_params');
% fd = params.fd;
% sigma0 = b;
% 
% % Bin spacings
% binmin = min(x);
% binmax = max(x);
% binspacing = x(2)-x(1);
% 
% % Generate pdf over bin centers
% pdfvals = RiceDist(1, fd, sigma0, zmin = binmin, zmax = binmax, dz = binspacing);
% 
% % Evaluate bin frequencies
% binfreqs = pdfvals*binspacing;
% 
% binfreqs = reshape(binfreqs, size(x));
% 
% end
% 
% function binfreqs = RiceDist2(b, x)

% Generate ratio distribution given x
% Outputs bin frequencies at bin centers predicted
% for ratio distribution with sigma0

% arguments
%     b % [sigma0, T2] values
%     x % bin centers
% end
% 
% % Get parameters
% params = evalin('base', 'current_params');
% fd = params.fd;
% sigma0 = b(1);
% 
% % Bin spacings
% binmin = min(x);
% binmax = max(x);
% binspacing = x(2)-x(1);
% 
% % Generate pdf over bin centers
% pdfvals = RiceDist(1, fd, sigma0, zmin = binmin, zmax = binmax, dz = binspacing);
% 
% % Evaluate bin frequencies
% binfreqs = pdfvals*binspacing;
% 
% binfreqs = reshape(binfreqs, size(x));
% 
% end

function binfreqs = RiceDist3(b, x)

% Generate ratio distribution given x
% Outputs bin frequencies at bin centers predicted
% for ratio distribution with sigma0

arguments
    b % [sigma0, T2, fd] values
    x % bin centers
end

% Get parameters
params = evalin('base', 'current_params');
sigma0 = b(1);
fd = b(3);

% Bin center
bincentres = x;

% Bin spacings
binmin = min(x);
binmax = max(x);
binspacing = x(2)-x(1);

% Generate pdf over bin centers
pdfvals = RiceDist(1, fd, sigma0, zs = bincentres);

% Evaluate bin frequencies
binfreqs = pdfvals*binspacing;

binfreqs = reshape(binfreqs, size(x));

end



function binfreqs = DTIRatioDist2(b, x)

% Generate ratio distribution given x
% Outputs bin frequencies at bin centers predicted
% for ratio distribution with sigma0

arguments
    b % [sigma0, T2] value
    x % bin centers
end

% Get parameters
params = evalin('base', 'current_params');
TEs = params.TE;
N0 = params.N0;
Nb = params.Nb;
sigma0 = b(1);
T2 = b(2);

% b0 signal
signal1 = exp(-TEs(1)/T2);
signal2 = exp(-TEs(2)/T2);


% Bin center
bincentres = x;

% Bin spacings
binmin = min(x);
binmax = max(x);
binspacing = x(2)-x(1);

% Generate pdf over bin centers
pdfvals = RatioDistRician( ...
    signal1, ...
    signal2, ...
    sigma0, ...
    N0=N0, ...
    Nb=Nb, ...
    zs = bincentres,...
    ys = bincentres,...
    ymin = binmin,...
    ymax = binmax,...
    dy = binspacing);

% Evaluate bin frequencies
binfreqs = pdfvals*binspacing;

binfreqs = reshape(binfreqs, size(x));


end